#This code was generated by OnshapeGPT, a chatbot trained by Chris Tilton in Spring 2023 as part of a research project under Professor Chris Rogers at Tufts University
import requests
from reqs import os_api_keys, url

def convert_link(old_link):
    if "cad.onshape.com/documents/" in old_link:
        old_link = old_link.replace("https://", "")
        parts = old_link.split("/")
        doc_id = parts[2]
        workspace_id = parts[4]
        element_id = parts[6]
        ps_link = f"https://cad.onshape.com/api/partstudios/d/{doc_id}/w/{workspace_id}/e/{element_id}/"
        did_link = f"https://cad.onshape.com/api/documents/d/{doc_id}/"
        return ps_link, did_link
    else:
        return "Invalid link format"
    
api_urls = convert_link(url)
ps_url = api_urls[0]
did_link = api_urls[1]

headers = {
    'Accept': 'application/vnd.onshape.v1+json',
    'Content-Type': 'application/json',
}

# Refine the hat with a brim and a taller top
# Hat Brim - A wide, short cylinder
create_hat_brim = {
    "feature": {
        "type": 134,
        "typeName": "BTMFeature",
        "message": {
            "featureType": "fCylinder",
            "name": "HatBrim",
            "namespace": "d2af92bf969176a0558f5f9c7::vfa91e58a301e3c528465aa9e::ef139159bebea87592e54aa0b::m6564dbd037df9a05421d9a73",
            "parameters": [
                {
                    "type": 147,
                    "typeName": "BTMParameterQuantity",
                    "message": {
                        "expression": "vector(0,0,6)*in",
                        "parameterId": "topCenter"
                    }
                },
                {
                    "type": 147,
                    "typeName": "BTMParameterQuantity",
                    "message": {
                        "expression": "vector(0,0,6.25)*in",
                        "parameterId": "bottomCenter"
                    }
                },
                {
                    "type": 147,
                    "typeName": "BTMParameterQuantity",
                    "message": {
                        "expression": "2*in",
                        "parameterId": "radius"
                    }
                }
            ]
        }
    }
}

# Hat Top - A tall, thinner cylinder than the brim
create_hat_top = {
    "feature": {
        "type": 134,
        "typeName": "BTMFeature",
        "message": {
            "featureType": "fCylinder",
            "name": "HatTop",
            "namespace": "d2af92bf969176a0558f5f9c7::vfa91e58a301e3c528465aa9e::ef139159bebea87592e54aa0b::m6564dbd037df9a05421d9a73",
            "parameters": [
                {
                    "type": 147,
                    "typeName": "BTMParameterQuantity",
                    "message": {
                        "expression": "vector(0,0,6.25)*in",
                        "parameterId": "topCenter"
                    }
                },
                {
                    "type": 147,
                    "typeName": "BTMParameterQuantity",
                    "message": {
                        "expression": "vector(0,0,8.25)*in",
                        "parameterId": "bottomCenter"
                    }
                },
                {
                    "type": 147,
                    "typeName": "BTMParameterQuantity",
                    "message": {
                        "expression": "1.25*in",
                        "parameterId": "radius"
                    }
                }
            ]
        }
    }
}

# Carrot nose - A cone representing the nose
create_carrot_nose = {
    "feature": {
        "type": 134,
        "typeName": "BTMFeature",
        "message": {
            "featureType": "fCone",
            "name": "CarrotNose",
            "namespace": "d2af92bf969176a0558f5f9c7::vfa91e58a301e3c528465aa9e::ef139159bebea87592e54aa0b::m6564dbd037df9a05421d9a73",
            "parameters": [
                {
                    "type": 147,
                    "typeName": "BTMParameterQuantity",
                    "message": {
                        "expression": "vector(0.75,0,5.5)*in",  # Slightly in front of the face
                        "parameterId": "topCenter"
                    }
                },
                {
                    "type": 147,
                    "typeName": "BTMParameterQuantity",
                    "message": {
                        "expression": "vector(1.5,0,5)*in",  # Base of the nose
                        "parameterId": "bottomCenter"
                    }
                },
                {
                    "type": 147,
                    "typeName": "BTMParameterQuantity",
                    "message": {
                        "expression": "0*in",
                        "parameterId": "topRadius"
                    }
                },
                {
                    "type": 147,
                    "typeName": "BTMParameterQuantity",
                    "message": {
                        "expression": "0.25*in",
                        "parameterId": "bottomRadius"
                    }
                }
            ]
        }
    }
}

# Sequentially create the refined hat and carrot nose
if ps_url != "Invalid Link Format":
    features_to_create = [create_hat_brim, create_hat_top, create_carrot_nose]
    for feature in features_to_create:
        response = requests.post(ps_url+'features', headers=headers, auth=os_api_keys, json=feature)
        if not response.ok:
            print(f"Failed to create geometry. Status code: {response.status_code}")
            print(response.text)  # Print the response content for further inspection
        else:
            print(f"{feature['feature']['message']['name']} created successfully.")
else:
    print("Invalid PS URL.")

#This is the end of the Generated Code