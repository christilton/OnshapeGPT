#This code was generated by OnshapeGPT, a chatbot trained by Chris Tilton in Spring 2023 as part of a research project under Professor Chris Rogers at Tufts University
import requests
from reqs import os_api_keys, url

def convert_link(old_link):
    if "cad.onshape.com/documents/" in old_link:
        old_link = old_link.replace("https://", "")
        parts = old_link.split("/")
        doc_id = parts[2]
        workspace_id = parts[4]
        element_id = parts[6]
        new_link = f"https://cad.onshape.com/api/partstudios/d/{doc_id}/w/{workspace_id}/e/{element_id}/"
        return new_link
    else:
        return "Invalid link format"

api_url = convert_link(url)
if api_url == "Invalid Link Format":
  print(api_url)

headers = {
    'Accept': 'application/vnd.onshape.v1+json',
    'Content-Type': 'application/json',
}

# Create base snowman sphere
create_geometry_base = {
  "feature" : {
    "type": 134,
    "typeName": "BTMFeature",
    "message": {
      "featureType": "fEllipsoid", 
      "name": "BaseSphere",
      "namespace":"d2af92bf969176a0558f5f9c7::vfa91e58a301e3c528465aa9e::ef139159bebea87592e54aa0b::m6564dbd037df9a05421d9a73",
      "parameters": [
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(0,0,0)*in",
            "parameterId": "center"}
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(4,4,4)*in",
            "parameterId": "radius"}
        }
      ]
    }
  }
}

# Create middle snowman sphere
create_geometry_middle = {
  "feature" : {
    "type": 134,
    "typeName": "BTMFeature",
    "message": {
      "featureType": "fEllipsoid", 
      "name": "MiddleSphere",
      "namespace":"d2af92bf969176a0558f5f9c7::vfa91e58a301e3c528465aa9e::ef139159bebea87592e54aa0b::m6564dbd037df9a05421d9a73",
      "parameters": [
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(0,0,4)*in",
            "parameterId": "center"}
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(3,3,3)*in",
            "parameterId": "radius"}
        }
      ]
    }
  }
}

# Create head snowman sphere
create_geometry_head = {
  "feature" : {
    "type": 134,
    "typeName": "BTMFeature",
    "message": {
      "featureType": "fEllipsoid", 
      "name": "HeadSphere",
      "namespace":"d2af92bf969176a0558f5f9c7::vfa91e58a301e3c528465aa9e::ef139159bebea87592e54aa0b::m6564dbd037df9a05421d9a73",
      "parameters": [
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(0,0,7)*in",
            "parameterId": "center"}
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(2,2,2)*in",
            "parameterId": "radius"}
        }
      ]
    }
  }
}

# Hat brim cylinder
create_geometry_hat_brim = {
  "feature" : {
    "type": 134,
    "typeName": "BTMFeature",
    "message": {
      "featureType": "fCylinder", 
      "name": "HatBrim",
      "namespace":"d2af92bf969176a0558f5f9c7::vfa91e58a301e3c528465aa9e::ef139159bebea87592e54aa0b::m6564dbd037df9a05421d9a73",
      "parameters": [
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(0,0,9)*in",
            "parameterId": "topCenter"}
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(0,0,8.5)*in",
            "parameterId": "bottomCenter"}
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "2.5*in",
            "parameterId": "radius"}
        }
      ]
    }
  }
}

# Hat top cylinder
create_geometry_hat_top = {
  "feature" : {
    "type": 134,
    "typeName": "BTMFeature",
    "message": {
      "featureType": "fCylinder", 
      "name": "HatTop",
      "namespace":"d2af92bf969176a0558f5f9c7::vfa91e58a301e3c528465aa9e::ef139159bebea87592e54aa0b::m6564dbd037df9a05421d9a73",
      "parameters": [
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(0,0,12)*in",
            "parameterId": "topCenter"}
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(0,0,9)*in",
            "parameterId": "bottomCenter"}
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "1.5*in",
            "parameterId": "radius"}
        }
      ]
    }
  }
}

# Executing the request for each geometry
if api_url == "Invalid Link Format":
  print(api_url)
else:
  # Base sphere
  response = requests.post(api_url+'features', headers=headers, auth=os_api_keys, json=create_geometry_base)
  # Middle sphere
  response = requests.post(api_url+'features', headers=headers, auth=os_api_keys, json=create_geometry_middle)
  # Head sphere
  response = requests.post(api_url+'features', headers=headers, auth=os_api_keys, json=create_geometry_head)
  # Hat brim
  response = requests.post(api_url+'features', headers=headers, auth=os_api_keys, json=create_geometry_hat_brim)
  # Hat top
  response = requests.post(api_url+'features', headers=headers, auth=os_api_keys, json=create_geometry_hat_top)

  # Checking the result
  if response.ok:
      print("Snowman with hat created successfully.")
  else:
      print(f"Failed to create snowman with hat. Status code: {response.status_code}")
      print(response.text)  # For further inspection
