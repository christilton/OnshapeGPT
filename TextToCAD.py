#This code was generated by OnshapeGPT, a chatbot trained by Chris Tilton in Spring 2023 as part of a research project under Professor Chris Rogers at Tufts University
import requests
from reqs import os_api_keys, url

def convert_link(old_link):
    if "cad.onshape.com/documents/" in old_link:
        old_link = old_link.replace("https://", "")
        parts = old_link.split("/")
        doc_id = parts[2]
        workspace_id = parts[4]
        element_id = parts[6]
        ps_link = f"https://cad.onshape.com/api/partstudios/d/{doc_id}/w/{workspace_id}/e/{element_id}/"
        did_link = f"https://cad.onshape.com/api/documents/d/{doc_id}/"
        return ps_link, did_link
    else:
        return "Invalid link format"

api_urls = convert_link(url)
ps_url = api_urls[0]
did_link = api_urls[1]

headers = {
    'Accept': 'application/vnd.onshape.v1+json',
    'Content-Type': 'application/json',
}

# Adjusting the body's position to be directly below the head and in the negative Y direction
create_body = {
  "feature": {
    "type": 134,
    "typeName": "BTMFeature",
    "message": {
      "featureType": "fCuboid",
      "name": "Body",
      "namespace": "d2af92bf969176a0558f5f9c7::vfa91e58a301e3c528465aa9e::ef139159bebea87592e54aa0b::m6564dbd037df9a05421d9a73",
      "parameters": [
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(-2.5,4,0)*in",  # Lower corner of the body
            "parameterId": "corner1"
          }
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(2.5,8,6)*in",  # Upper corner of the body
            "parameterId": "corner2"
          }
        }
      ]
    }
  }
}

# Positions of arms and legs are adjusted to match the body's new position.
create_left_arm = {
  "feature": {
    "type": 134,
    "typeName": "BTMFeature",
    "message": {
      "featureType": "fCylinder",
      "name": "LeftArm",
      "namespace": "d2af92bf969176a0558f5f9c7::vfa91e58a301e3c528465aa9e::ef139159bebea87592e54aa0b::m6564dbd037df9a05421d9a73",
      "parameters": [
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(-3,6,3)*in",  # Positioning left arm
            "parameterId": "topCenter"
          }
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(-3,6,0)*in",  # Aligning with body's bottom
            "parameterId": "bottomCenter"
          }
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "0.5*in",  # Radius of the arm
            "parameterId": "radius"
          }
        }
      ]
    }
  }
}

create_right_arm = {
  "feature": {
    "type": 134,
    "typeName": "BTMFeature",
    "message": {
      "featureType": "fCylinder",
      "name": "RightArm",
      "namespace": "d2af92bf969176a0558f5f9c7::vfa91e58a301e3c528465aa9e::ef139159bebea87592e54aa0b::m6564dbd037df9a05421d9a73",
      "parameters": [
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(3,6,3)*in",  # Positioning right arm
            "parameterId": "topCenter"
          }
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(3,6,0)*in",  # Aligning with body's bottom
            "parameterId": "bottomCenter"
          }
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "0.5*in",  # Radius of the arm
            "parameterId": "radius"
          }
        }
      ]
    }
  }
}

create_left_leg = {
  "feature": {
    "type": 134,
    "typeName": "BTMFeature",
    "message": {
      "featureType": "fCuboid",
      "name": "LeftLeg",
      "namespace": "d2af92bf969176a0558f5f9c7::vfa91e58a301e3c528465aa9e::ef139159bebea87592e54aa0b::m6564dbd037df9a05421d9a73",
      "parameters": [
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(-2,8,0)*in",  # Lower corner for left leg
            "parameterId": "corner1"
          }
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(-1,9,2)*in",  # Upper corner for left leg
            "parameterId": "corner2"
          }
        }
      ]
    }
  }
}

create_right_leg = {
  "feature": {
    "type": 134,
    "typeName": "BTMFeature",
    "message": {
      "featureType": "fCuboid",
      "name": "RightLeg",
      "namespace": "d2af92bf969176a0558f5f9c7::vfa91e58a301e3c528465aa9e::ef139159bebea87592e54aa0b::m6564dbd037df9a05421d9a73",
      "parameters": [
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(1,8,0)*in",  # Lower corner for right leg
            "parameterId": "corner1"
          }
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(2,9,2)*in",  # Upper corner for right leg
            "parameterId": "corner2"
          }
        }
      ]
    }
  }
}

if ps_url == "Invalid link format":
    print(ps_url)
else:
    features = [create_body, create_left_arm, create_right_arm, create_left_leg, create_right_leg]
    for feature in features:
        response = requests.post(ps_url+'features', headers=headers, auth=os_api_keys, json=feature)
        if response.ok:
            print(f"{feature['feature']['message']['name']} adjusted and created successfully.")
        else:
            print(f"Failed to adjust and create {feature['feature']['message']['name']}. Status code: {response.status_code}")
            print(response.text)

#This is the end of the Generated Code