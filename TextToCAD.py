#This code was generated by OnshapeGPT V2, a chatbot trained by Chris Tilton in Spring 2023 as part of a research project under Professor Chris Rogers at Tufts University.
import requests
from reqs import os_api_keys, url

def convert_link(old_link):
    if "cad.onshape.com/documents/" in old_link:
        old_link = old_link.replace("https://", "")
        parts = old_link.split("/")
        doc_id = parts[2]
        workspace_id = parts[4]
        element_id = parts[6]
        new_link = f"https://cad.onshape.com/api/partstudios/d/{doc_id}/w/{workspace_id}/e/{element_id}/"
        did_link = f"https://cad.onshape.com/api/documents/d/{doc_id}/"
        return new_link, did_link
    else:
        return "Invalid link format"
    
api_urls = convert_link(url)
api_url = api_urls[0]
did_link = api_urls[1]

if api_url == "Invalid Link Format":
  print(api_url)

headers = {
    'Accept': 'application/vnd.onshape.v1+json',
    'Content-Type': 'application/json',
}

namespace = "d2af92bf969176a0558f5f9c7::vfa91e58a301e3c528465aa9e::ef139159bebea87592e54aa0b::m6564dbd037df9a05421d9a73"

# Creating the face
create_face = {
  "feature": {
    "type": 134,
    "typeName": "BTMFeature",
    "message": {
      "featureType": "fCuboid", 
      "name": "Face",
      "namespace":namespace,
      "parameters": [
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(-5,-5,0)*in",
            "parameterId": "corner1"}
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(5,5,0.5)*in",
            "parameterId": "corner2"}
        }
      ]
    }
  }
}

if api_url == "Invalid Link Format":
  print(api_url)
else:
  response = requests.post(api_url + 'features', headers=headers, auth=os_api_keys, json=create_face)
 

# Creating left eye
create_left_eye = {
  "feature": {
    "type": 134,
    "typeName": "BTMFeature",
    "message": {
      "featureType": "fCylinder",
      "name": "LeftEye",
      "namespace":namespace,
      "parameters": [
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(-2,2,0.5)*in",
            "parameterId": "topCenter"}
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(-2,2,2)*in",
            "parameterId": "bottomCenter"}
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "1*in",
            "parameterId": "radius"}
        }
      ]
    }
  }
}

response = requests.post(api_url + 'features', headers=headers, auth=os_api_keys, json=create_left_eye)

# Creating right eye
create_right_eye = {
  "feature": create_left_eye["feature"]
}
create_right_eye["feature"]["message"]["parameters"][0]["message"]["expression"] = "vector(2,2,0.5)*in"
create_right_eye["feature"]["message"]["parameters"][1]["message"]["expression"] = "vector(2,2,2)*in"
create_right_eye["feature"]["message"]["name"] = "RightEye"

response = requests.post(api_url + 'features', headers=headers, auth=os_api_keys, json=create_right_eye)

# Creating nose
create_nose = {
  "feature": {
    "type": 134,
    "typeName": "BTMFeature",
    "message": {
      "featureType": "fCylinder",
      "name": "Nose",
      "namespace":namespace,
      "parameters": [
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(0,0,0.5)*in",
            "parameterId": "topCenter"}
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(0,0,2)*in",
            "parameterId": "bottomCenter"}
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "0.5*in",
            "parameterId": "radius"}
        }
      ]
    }
  }
}

response = requests.post(api_url + 'features', headers=headers, auth=os_api_keys, json=create_nose)

# Creating the mouth
create_mouth = {
  "feature": {
    "type": 134,
    "typeName": "BTMFeature",
    "message": {
      "featureType": "fCuboid",
      "name": "Mouth",
      "namespace":namespace,
      "parameters": [
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(-3,-3,0.5)*in",
            "parameterId": "corner1"}
        },
        {
          "type": 147,
          "typeName": "BTMParameterQuantity",
          "message": {
            "expression": "vector(3,-2,0.75)*in",
            "parameterId": "corner2"}
        }
      ]
    }
  }
}

response = requests.post(api_url + 'features', headers=headers, auth=os_api_keys, json=create_mouth)

response = requests.post(did_link+'versions', headers=headers, auth=os_api_keys, json={"name":"Create a robot face with eyes, a nose, and a mouth (V2)","publishVersion":1})
print(response.text)